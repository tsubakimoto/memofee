@page "/articles/{ArticleId}/notes"
@using Memofee.Dtos
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Article Notes - MemoFee</PageTitle>

<div class="container-fluid">
    @if (isLoading)
    {
        <div class="d-flex justify-content-center py-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (article is not null)
    {
        <div class="row">
            <div class="col-md-8">
                <!-- Article Information -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h4 class="mb-0">
                            <a href="@article.LinkUrl" target="_blank" class="text-decoration-none">
                                @article.Title
                                <i class="bi bi-box-arrow-up-right ms-1"></i>
                            </a>
                        </h4>
                    </div>
                    <div class="card-body">
                        @if (!string.IsNullOrEmpty(article.Summary))
                        {
                            <p class="card-text">@article.Summary</p>
                        }
                        <div class="d-flex flex-wrap gap-2 mb-2">
                            @if (article.Tags.Any())
                            {
                                <strong class="me-2">Article Tags:</strong>
                                @foreach (var tag in article.Tags)
                                {
                                    <span class="badge bg-secondary">@tag</span>
                                }
                            }
                        </div>
                        <small class="text-muted">
                            @if (article.PublishedAt.HasValue)
                            {
                                <span>Published: @article.PublishedAt.Value.ToString("MMM dd, yyyy")</span>
                            }
                            else
                            {
                                <span>Fetched: @article.FetchedAt.ToString("MMM dd, yyyy")</span>
                            }
                            @if (!string.IsNullOrEmpty(article.Author))
                            {
                                <span> | By: @article.Author</span>
                            }
                        </small>
                    </div>
                </div>

                <!-- Notes Section -->
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="bi bi-journal-text"></i> My Notes
                        </h5>
                        <button class="btn btn-outline-secondary btn-sm" @onclick="GoBack">
                            <i class="bi bi-arrow-left"></i> Back to Articles
                        </button>
                    </div>
                    <div class="card-body">
                        <EditForm Model="noteRequest" OnValidSubmit="SaveNote">
                            <DataAnnotationsValidator />
                            
                            <!-- Starred Toggle -->
                            <div class="form-check mb-3">
                                <InputCheckbox id="starred" class="form-check-input" @bind-Value="noteRequest.Starred" />
                                <label class="form-check-label" for="starred">
                                    <i class="bi bi-star"></i> Star this article
                                </label>
                            </div>

                            <!-- Note Body -->
                            <div class="mb-3">
                                <label for="noteBody" class="form-label">Notes</label>
                                <InputTextArea id="noteBody" class="form-control" rows="8" 
                                               @bind-Value="noteRequest.Body" 
                                               placeholder="Add your thoughts, insights, or comments about this article..." />
                                <ValidationMessage For="@(() => noteRequest.Body)" />
                            </div>

                            <!-- Tags -->
                            <div class="mb-3">
                                <label for="noteTags" class="form-label">Tags</label>
                                <input type="text" id="noteTags" class="form-control" 
                                       @bind="tagsInput" 
                                       placeholder="Enter tags separated by commas (e.g., research, important, todo)" />
                                <div class="form-text">
                                    Separate multiple tags with commas.
                                </div>
                                @if (noteRequest.Tags.Any())
                                {
                                    <div class="mt-2">
                                        @foreach (var tag in noteRequest.Tags)
                                        {
                                            <span class="badge bg-primary me-1">@tag</span>
                                        }
                                    </div>
                                }
                            </div>

                            @if (!string.IsNullOrEmpty(saveError))
                            {
                                <div class="alert alert-danger" role="alert">
                                    @saveError
                                </div>
                            }

                            <div class="d-flex gap-2">
                                <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    }
                                    <i class="bi bi-check-lg"></i> Save Notes
                                </button>
                                
                                @if (existingNote is not null)
                                {
                                    <button type="button" class="btn btn-outline-danger" @onclick="DeleteNote">
                                        <i class="bi bi-trash"></i> Delete Notes
                                    </button>
                                }
                            </div>
                        </EditForm>

                        @if (existingNote is not null)
                        {
                            <hr />
                            <small class="text-muted">
                                Created: @existingNote.CreatedAt.ToString("MMM dd, yyyy HH:mm")
                                @if (existingNote.UpdatedAt != existingNote.CreatedAt)
                                {
                                    <span> | Last updated: @existingNote.UpdatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                                }
                            </small>
                        }
                    </div>
                </div>
            </div>
            
            <!-- Sidebar -->
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">Quick Actions</h6>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <a href="@article.LinkUrl" target="_blank" class="btn btn-outline-primary">
                                <i class="bi bi-box-arrow-up-right"></i> Read Full Article
                            </a>
                            <a href="/articles" class="btn btn-outline-secondary">
                                <i class="bi bi-list"></i> Browse More Articles
                            </a>
                            <a href="/feeds" class="btn btn-outline-info">
                                <i class="bi bi-rss"></i> Manage Feeds
                            </a>
                        </div>
                    </div>
                </div>

                @if (article.Tags.Any())
                {
                    <div class="card mt-3">
                        <div class="card-header">
                            <h6 class="mb-0">Article Tags</h6>
                        </div>
                        <div class="card-body">
                            @foreach (var tag in article.Tags)
                            {
                                <span class="badge bg-secondary me-1 mb-1">@tag</span>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <i class="bi bi-exclamation-triangle display-1 text-warning"></i>
            <h3 class="mt-3">Article Not Found</h3>
            <p class="text-muted">The requested article could not be found.</p>
            <a href="/articles" class="btn btn-primary">Back to Articles</a>
        </div>
    }
</div>

@code {
    [Parameter] public string ArticleId { get; set; } = string.Empty;

    private ArticleResponse? article;
    private NoteResponse? existingNote;
    private CreateUpdateNoteRequest noteRequest = new();
    private bool isLoading = true;
    private bool isSaving = false;
    private string saveError = string.Empty;
    private string tagsInput = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadArticle();
        await LoadExistingNote();
    }

    private async Task LoadArticle()
    {
        try
        {
            article = await Http.GetFromJsonAsync<ArticleResponse>($"/api/articles/{ArticleId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load article: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadExistingNote()
    {
        try
        {
            var notes = await Http.GetFromJsonAsync<List<NoteResponse>>($"/api/articles/{ArticleId}/notes");
            existingNote = notes?.FirstOrDefault();
            
            if (existingNote is not null)
            {
                noteRequest.Body = existingNote.Body;
                noteRequest.Tags = existingNote.Tags;
                noteRequest.Starred = existingNote.Starred;
                tagsInput = string.Join(", ", existingNote.Tags);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load existing note: {ex.Message}");
        }
    }

    private async Task SaveNote()
    {
        try
        {
            isSaving = true;
            saveError = string.Empty;

            // Parse tags from input
            noteRequest.Tags = tagsInput.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                       .Select(t => t.Trim())
                                       .Where(t => !string.IsNullOrEmpty(t))
                                       .Distinct()
                                       .ToArray();

            var response = await Http.PutAsJsonAsync($"/api/articles/{ArticleId}/notes", noteRequest);
            
            if (response.IsSuccessStatusCode)
            {
                await LoadExistingNote(); // Reload to get updated timestamps
                
                // Show success message (could be improved with toast notification)
                saveError = string.Empty;
                StateHasChanged();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                saveError = errorMessage;
            }
        }
        catch (Exception ex)
        {
            saveError = $"Failed to save note: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteNote()
    {
        if (existingNote is null) return;

        try
        {
            var response = await Http.DeleteAsync($"/api/articles/{ArticleId}/notes/{existingNote.Id}");
            
            if (response.IsSuccessStatusCode)
            {
                existingNote = null;
                noteRequest = new CreateUpdateNoteRequest();
                tagsInput = string.Empty;
                StateHasChanged();
            }
            else
            {
                saveError = "Failed to delete note.";
            }
        }
        catch (Exception ex)
        {
            saveError = $"Failed to delete note: {ex.Message}";
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/articles");
    }
}